{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"PhaserDebugDrawPlugin.js","sourcesContent":["import Phaser from 'phaser';\n\nconst _inputs = [];\nconst _masks = [];\nconst _shapes = {\n  Circle: new Phaser.Geom.Circle(),\n  Ellipse: new Phaser.Geom.Ellipse(),\n  Rectangle: new Phaser.Geom.Rectangle(),\n  Triangle: new Phaser.Geom.Triangle()\n};\n\nfunction getLeft (obj) {\n  return obj.originX ? (obj.x - obj.originX * obj.displayWidth) : obj.x;\n}\n\nfunction getTop (obj) {\n  return obj.originY ? (obj.y - obj.originY * obj.displayHeight) : obj.y;\n}\n\nfunction getShapeName (shape) {\n  switch (shape.constructor.name) {\n    default:\n    case 'Rectangle':\n      return 'Rect';\n    case 'Circle':\n    case 'Ellipse':\n    case 'Triangle':\n      return shape.constructor.name;\n  }\n}\n\nclass DebugDrawPlugin extends Phaser.Plugins.ScenePlugin {\n  boot () {\n    if (Phaser.Class.name !== 'Class') {\n      console.warn('DebugDrawPlugin does not work with the minified version of Phaser. Plugin not loaded.');\n    } else {\n      this.systems.events\n        .on('start', this.sceneStart, this)\n        .on('render', this.sceneRender, this)\n        .on('shutdown', this.sceneShutdown, this)\n        .once('destroy', this.sceneDestroy, this);\n    }\n  }\n\n  sceneStart () {\n    this.graphic = this.scene.add.graphics();\n  }\n\n  sceneShutdown () {\n    this.graphic.destroy();\n    this.graphic = null;\n  }\n\n  sceneRender () {\n    this.drawAll();\n  }\n\n  drawAll () {\n    const inputs = _inputs;\n    const masks = _masks;\n    const { displayList } = this.systems;\n\n    if (!displayList.length) return;\n\n    inputs.length = 0;\n    masks.length = 0;\n\n    this.graphic.clear().lineStyle(this.lineWidth, this.color, this.alpha);\n\n    displayList.each(this.processObj, this, inputs, masks);\n    if (inputs.length) this.drawObjsInputs(inputs);\n    if (masks.length) this.drawObjsMasks(masks);\n  }\n\n  processObj (obj, inputs, masks) {\n    this.drawObj(obj);\n\n    if (obj.input) {\n      inputs[inputs.length] = obj;\n    }\n\n    if (obj.mask && masks.indexOf(obj) === -1) {\n      masks[masks.length] = obj;\n    }\n  }\n\n  sceneDestroy () {\n    this.systems.events\n      .off('start', this.sceneStart, this)\n      .off('render', this.sceneRender, this)\n      .off('shutdown', this.sceneShutdown, this)\n      .off('destroy', this.sceneDestroy, this);\n\n    this.scene = null;\n    this.systems = null;\n  }\n\n  drawObjsInputs (objs) {\n    this.graphic.lineStyle(this.lineWidth, this.inputColor, this.alpha);\n    objs.forEach(this.drawObjInput, this);\n  }\n\n  drawObjsMasks (objs) {\n    this.graphic.fillStyle(this.maskColor, this.alpha).lineStyle(this.lineWidth, this.maskColor, this.alpha);\n    objs.forEach(this.drawObjMask, this);\n  }\n\n  drawObj (obj) {\n    this.graphic.strokeRect(getLeft(obj), getTop(obj), obj.displayWidth, obj.displayHeight);\n  }\n\n  drawObjInput (obj) {\n    const { hitArea } = obj.input;\n    const ctor = hitArea.constructor;\n    const shape = _shapes[ctor.name];\n    if (shape) {\n      ctor.CopyFrom(hitArea, shape);\n      ctor.Offset(shape, getLeft(obj), getTop(obj));\n\n      this.graphic['stroke' + getShapeName(shape) + 'Shape'](shape);\n    }\n  }\n\n  drawObjMask (obj) {\n    if (obj.mask.bitmapMask) this.drawObjBitmapMask(obj);\n  }\n\n  drawObjBitmapMask (obj) {\n    this.drawObj(obj.mask.bitmapMask);\n  }\n\n  bringToTop () {\n    this.systems.displayList.bringToTop(this.graphic);\n  }\n}\n\nObject.assign(DebugDrawPlugin.prototype, {\n  alpha: 0.5,\n  color: 0x00ddff,\n  inputColor: 0xffcc00,\n  lineWidth: 2,\n  maskColor: 0xff0022\n});\n\nif (typeof window !== 'undefined') {\n  window.PhaserDebugDrawPlugin = DebugDrawPlugin;\n}\n\nexport default DebugDrawPlugin;\n"]}